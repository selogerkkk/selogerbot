import os
import requests
import time
from dotenv import load_dotenv
import re
import datetime

load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

# Fun√ß√£o para obter as atualiza√ß√µes do Telegram


def get_updates():
    url = f'https://api.telegram.org/bot{API_TOKEN}/getUpdates'
    response = requests.get(url)
    data = response.json()
    return data

# Fun√ß√£o para enviar uma mensagem para o Telegram


def send_message(text):
    url = f'https://api.telegram.org/bot{API_TOKEN}/sendMessage'
    params = {'chat_id': CHAT_ID, 'text': text}
    response = requests.post(url, json=params)
    if response.status_code == 200:
        return response.json()
    else:
        print(
            f"Erro ao enviar a mensagem: {response.status_code} - {response.text}")
        return None


# Fun√ß√£o para enviar mensagem
def perform_action():
    send_message("Mensagem lida!")


# Fun√ß√£o para processar a mensagem recebida sem filtro
def process_message_without_filter(message):
    if 'text' in message:
        # Extrai o nome do remetente
        sender_name = message['from']['first_name']
        # Extrai o conte√∫do da mensagem
        text = message['text']
        print(f"Texto da mensagem: {text}")

        # Imprime o conte√∫do da mensagem
        print(f"{sender_name}: {text}")
    else:
        print("Mensagem enviada n√£o √© um texto!")


def process_message(message):
    # Verifica se a mensagem cont√©m texto
    if 'text' in message:
        # Extrai o nome do remetente
        sender_name = message['from']['first_name']
        # Extrai o conte√∫do da mensagem
        text = message['text']
        
        # Verifica se a mensagem cont√©m o padr√£o espec√≠fico
        if "‚úÖüî• TRADERZISMO FREE üî•‚úÖ" in text:
            # Procura um padr√£o espec√≠fico na mensagem usando express√µes regulares
            pattern = r"üìä ([^\n]+)\n(üî¥ PUT|üü¢ CALL)?\n‚ö†Ô∏è Operar (AGORA|\d{2}:\d{2})"
            match = re.search(pattern, text)
            
            # Verifica se o padr√£o foi encontrado
            if match:
                # Extrai as informa√ß√µes desejadas
                par = match.group(1).strip()
                direcao = match.group(2).strip() if match.group(2) else "N/A"
                horario = match.group(3).strip() if match.group(3) != "AGORA" else  datetime.datetime.now().strftime("%H:%M")
                # Imprime as informa√ß√µes com o nome do remetente
                print(f"Mensagem recebida de {sender_name}:")
                print(f"Par: {par}")
                print(f"Dire√ß√£o: {direcao}")
                print(f"Hor√°rio: {horario}")
            else:
                print("Padr√£o n√£o encontrado na mensagem.")
        else:
            print("Mensagem n√£o cont√©m o padr√£o esperado.")

# Fun√ß√£o para n√£o repetir a mensagem

def control_action():
    action_counter = 0
    while True:
        updates = get_updates()
        if 'result' in updates:
            results = updates['result']
            if results:
                last_message = results[-1]['message']
                last_message_id = last_message['message_id']
                if last_message_id != action_counter:
                    action_counter = last_message_id
                    process_message(last_message)
                    perform_action()
        time.sleep(1)


# Iniciar
control_action()
